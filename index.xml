<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>goodking-bq's notes</title><link>https://goodking-bq.github.io/</link><description>Recent content on goodking-bq's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 14 Jul 2020 22:30:13 +0800</lastBuildDate><atom:link href="https://goodking-bq.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>kubernetes Gitlab Runner 的安装</title><link>https://goodking-bq.github.io/post/kubernetes/gitlab-runner/</link><pubDate>Tue, 14 Jul 2020 22:30:13 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/gitlab-runner/</guid><description>helm 添加 gitlab源 1 helm repo add gitlab https://charts.gitlab.io/ 下载及安装 1. 下载 1 2 helm fetch gitlab/gitlab-runner --untar cp gitlab/values.yaml gitlab-runner-config.yaml 2. 编辑配置文件 一些配置及说明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description></item><item><title>Kubernetes 集群安装 Gitlab</title><link>https://goodking-bq.github.io/post/kubernetes/gitlab/</link><pubDate>Wed, 08 Jul 2020 10:57:44 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/gitlab/</guid><description>helm添加gitlab源 1 helm repo add gitlab https://charts.gitlab.io/ 安装 1 2 helm fetch gitlab/gitlab --untar cp gitlab/values.yaml gitlab-config.yaml 编辑 gitlab-config.yaml： 仅给出了我自己的修改 1 2 3 4 5 6 7 8 9</description></item><item><title>kubernetes 中利用helm安装jenkins</title><link>https://goodking-bq.github.io/post/kubernetes/jenkins/</link><pubDate>Fri, 03 Jul 2020 10:24:52 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/jenkins/</guid><description>Jenkins 是什么 是一款开源 CI&amp;amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。目前提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需</description></item><item><title>kubernetes 集群内部应用访问集群外部的服务</title><link>https://goodking-bq.github.io/post/kubernetes/outside-service/</link><pubDate>Mon, 01 Jun 2020 15:58:04 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/outside-service/</guid><description>我们经常需要 kubernetes 集群内部应用访问集群外部的服务， 比如mysql启动在集群外。有两种方式。 Service type:ExternalName 集群内不访问通常都是通过dns访问，也就是 serv</description></item><item><title>配置 kubernetes 拉取私有仓库</title><link>https://goodking-bq.github.io/post/kubernetes/imagepullsecrets/</link><pubDate>Mon, 25 May 2020 15:26:54 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/imagepullsecrets/</guid><description>docker拉取镜像是不需要登陆的，那怎么拉取哪些需要认证的私密镜像呢？ 可以使用secret 生成 secret 1 kubectl create secret docker-registry aliyun-auth --docker-server=registry.cn-hangzhou.aliyuncs.com --docker-username=avc@qq.com --docker-password=121212 最后生成的数据类似这样的</description></item><item><title>Kubernetes Dashborad 配置访问</title><link>https://goodking-bq.github.io/post/kubernetes/dashborad-access/</link><pubDate>Fri, 22 May 2020 10:43:43 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/dashborad-access/</guid><description>Kubernetes Dashborad 有两种认证方式 TOKEN： 每个 Service Account 都有一个 valid Bearer Token ，可用于登录 Dashboard Kubeconfig：使用创建的kubeconfig文件以配置对集群的访问</description></item><item><title>kubernets 里配置 Traefik</title><link>https://goodking-bq.github.io/post/kubernetes/traefik/</link><pubDate>Wed, 20 May 2020 09:22:19 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/traefik/</guid><description>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动</description></item><item><title>kubernetes master集群搭建</title><link>https://goodking-bq.github.io/post/kubernetes/cluster-install/</link><pubDate>Fri, 15 May 2020 10:24:52 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/cluster-install/</guid><description>开始之前 kubernetes master 集群有两种模式 堆叠（Stacked） etcd 拓扑 每个节点都运行 kube-apiserver，kube-scheduler ， kube-c</description></item><item><title>kubernetes 的 configmap 使用</title><link>https://goodking-bq.github.io/post/kubernetes/configmap/</link><pubDate>Fri, 15 May 2020 10:11:48 +0800</pubDate><guid>https://goodking-bq.github.io/post/kubernetes/configmap/</guid><description>kubernetes 的 configmap ConfigMap 是 configMap 是一种 API 对象，用来将非机密性的数据保存到健值对中。使用时可以用作环境变量、命令行参数或者存储卷中的配置文件。 ConfigMap 将您的环境配置信息</description></item><item><title>Jetbrains系列产品 激活方法</title><link>https://goodking-bq.github.io/post/other/jetbrains_crash/</link><pubDate>Thu, 14 May 2020 15:00:49 +0800</pubDate><guid>https://goodking-bq.github.io/post/other/jetbrains_crash/</guid><description>agent license server https://fls.jetbrains-agent.com 下载地址： https://lanzous.com/b0f1c6hzc 详情查看 https://zhile.io/2018/08/17/jetbrains-license-server-crack.html</description></item><item><title>About</title><link>https://goodking-bq.github.io/about/</link><pubDate>Thu, 14 May 2020 14:57:17 +0800</pubDate><guid>https://goodking-bq.github.io/about/</guid><description>this is about me</description></item><item><title>python实现的排序算法</title><link>https://goodking-bq.github.io/post/golang/first/</link><pubDate>Sun, 14 May 2017 15:47:52 +0800</pubDate><guid>https://goodking-bq.github.io/post/golang/first/</guid><description>总结了一下常见集中排序的算法 归并排序 归并排序也称合并排序，是分治法的典型应用。分治思想是将每个问题分解成个个小问题，将每个小问题解决，然后合</description></item><item><title>python实现的排序算法</title><link>https://goodking-bq.github.io/post/python/sort/</link><pubDate>Sun, 14 May 2017 15:47:52 +0800</pubDate><guid>https://goodking-bq.github.io/post/python/sort/</guid><description>总结了一下常见集中排序的算法 归并排序 归并排序也称合并排序，是分治法的典型应用。分治思想是将每个问题分解成个个小问题，将每个小问题解决，然后合</description></item><item><title>回调函数</title><link>https://goodking-bq.github.io/post/python/callback/</link><pubDate>Sun, 14 May 2017 15:46:37 +0800</pubDate><guid>https://goodking-bq.github.io/post/python/callback/</guid><description>什么是回调函数 通过函数参数传递到其它代码的，某一块可执行代码的引用。这一设计允许了底层代码调用在高层定义的子程序。这种通过函数参数传的到函数</description></item><item><title>python 常用的内置函数</title><link>https://goodking-bq.github.io/post/python/build-in-functions/</link><pubDate>Sun, 14 May 2017 15:43:56 +0800</pubDate><guid>https://goodking-bq.github.io/post/python/build-in-functions/</guid><description>map 对可迭代函数&amp;rsquo;iterable&amp;rsquo;中的每一个元素应用‘function’方法，将结果作为list返回。 例: 1 2 3 4 &amp;gt;&amp;gt;&amp;gt;</description></item></channel></rss>